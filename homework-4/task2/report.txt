Класс Router при инициализации создает пустой хэш доступных путей запроса 
данных (роутов).
Далее при запуске метода init происходит обращение к методу self.resources,
в который в качестве аргументов передаются:
-PostsController - декларативный класс содержащий в себе:
    -массив постов
    -перечень методов для работы с массивом постов
-ключевое слово 'posts' - для определения что работа будет вестись с ресурсами
 типа "пост", а не "комментарий".

Метод resources основываясь на переданных ему аргументах подставляет их названия
и делает "карту" роутов в виде хэша (в случае с GET - вложенного 2-уровневого хэша)
В данной "карте" роутов закреплены символы методов класса PostsController, для их
вызова в дальнейшем через данный хэш (пары ключ-значение).

Далее Router.init входит в цикл и предлагает пользователю выбрать данные для работы:
1 - посты
2 - комментарии (не реализвано)
q - выход (приведет к разрыву цикла и окончанию метода и программы)

При выборе опции 1 - посты:
Через класс PostsController запускается метод connection.
Указанный метод определен в отдельном модуле Resource, который определяет 
алгоритм запроса команд для программы.
Алгоритм получения команд может быть общим как для работы с постами (опция 1),
так и для работы с комментариями (опция 2, не реализована).
Данный метод вынесен в отдельный модуль для избежания его повторения для разных 
типов данных передаваемых в работу (принцип DRY, do not repeat yourself).

Модуль Resource расширяет класс PostsController с помощью комманды 
extend для того чтобы обеспечить возможность вызова методов модуля Resource
(в частности connection) на уровне класса PostsController, 
без возможности вызова connection из объекта-экземпляра данного класса.
Т.к. экземпляр PostsController нами не создается.
Работа ведется напрямую через класс с его методами.
PostsController являетс вспомогательным классом, абстракцией группирующей в себе
возможные варианты взаимодействия с выбранными объектами (посты/комменты),
по определенным алгоритмам.
Создание же экземпляров данного класса не является целесообразным,
т.к. такие объекты будут обладать теми же методами работы и для нашей цели будут
излишними.

Дальнейшая работа программы осуществляется в рамках метода connection,
запрашивающего у пользователя ввод комманд, которые обращаются к соответствующим
ключам в "карте" роутов (данный хэш передан в качестве аргумента) и в случае 
мэтча (совпадения строк) происходит вызов сохраненных в качестве символов ссылок 
на методы PostsController для работы с данными. 
